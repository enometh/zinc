# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

# synopsis {{{
# Current Working Directory
#
# }}}

(( ${+zinc_bg[zincs_cwd]} )) || zinc_bg[zincs_cwd]=blue

# A modification of the reverse tabbing utility by Daniel Friesel <derf@xxxxxxxxxxxxxxxxxx>
## reverse tabbing, useful in the prompt
## Copyright (C) 2008 by Daniel Friesel <derf@xxxxxxxxxxxxxxxxxx>
## Copyright (C) 2018 by Ben Klein <robobenklein@xxxxxxxxxxxxxxxxxx>
## License: WTFPL <http://sam.zoy.org/wtfpl>
##
## Robobenklein: The original had a CAVEAT:
## "directory-names containing two or more consecutive spaces are not supported"
## This issue has been fixed.
##
## Also the script is now a ZSH function instead of an executable shebang file.
function _zincs_cwd_strat_rtab () {

  setopt localoptions
  setopt rc_quotes null_glob

  typeset -i lastfull=0
  typeset -i short=0
  typeset -i tilde=0
  typeset -i named=0

  if zstyle -t ':prompt:rtab' fish; then
    lastfull=1
    short=1
    tilde=1
  fi
  if zstyle -t ':prompt:rtab' nameddirs; then
    tilde=1
    named=1
  fi
  zstyle -t ':prompt:rtab' last && lastfull=1
  zstyle -t ':prompt:rtab' short && short=1
  zstyle -t ':prompt:rtab' tilde && tilde=1

  while [[ $1 == -* ]]; do
    case $1 in
      -f|--fish)
        lastfull=1
        short=1
        tilde=1
      ;;
      -h|--help)
        print "Usage: $0 [-f -l -s -t] [directory]"
        print ' -f, --fish      fish-simulation, like -l -s -t'
        print ' -l, --last      Print the last directory''s full name'
        print ' -s, --short     Truncate directory names to the first character'
        print ' -t, --tilde     Substitute ~ for the home directory'
        print ' -T, --nameddirs Substitute named directories as well'
        print 'The long options can also be set via zstyle, like'
        print '  zstyle :prompt:rtab fish yes'
        return 0
      ;;
      -l|--last) lastfull=1 ;;
      -s|--short) short=1 ;;
      -t|--tilde) tilde=1 ;;
      -T|--nameddirs)
        tilde=1
        named=1
      ;;
    esac
    shift
  done

  typeset -a tree expn
  typeset result part dir=${1-$PWD}
  typeset -i i

  [[ -d $dir ]] || return 0

  if (( named )) {
    for part in ${(k)nameddirs}; {
      [[ $dir == ${nameddirs[$part]}(/*|) ]] && dir=${dir/${nameddirs[$part]}/\~$part}
    }
  }
  (( tilde )) && dir=${dir/$HOME/\~}
  tree=(${(s:/:)dir})
  # broke syntax highlighting here?
  REPLY=$(
    unfunction chpwd 2> /dev/null
    unset chpwd_functions 2>/dev/null
    if [[ $tree[1] == \~* ]] {
      builtin cd ${~tree[1]}
      result=$tree[1]
      shift tree
    } else {
      builtin cd /
    }
    for dir in $tree; {
      if (( lastfull && $#tree == 1 )) {
        result+="/$tree"
        break
      }
      expn=(a b)
      part=''
      i=0
      until [[ (( ${#expn} == 1 )) || $dir = $expn || $i -gt 99 ]]  do
        (( i++ ))
        part+=$dir[$i]
        expn=($(echo ${part}*(-/)))
        (( short )) && break
      done
      result+="/$part"
      builtin cd $dir
      shift tree
    }
    echo ${result:-/}
  )
}

typeset -gA zincs_cwd
(( ${+zincs_cwd[rtab_tidle]} )) || zincs_cwd[rtab_tidle]=1
_zincs_cwd_output ()
{
  # ${var:+substitution} if set non-null
  if (( ${+zincs_cwd[rtab]} )); then
    _zincs_cwd_strat_rtab ${zincs_cwd[rtab_tidle]:+-t} ${zincs_cwd[rtab_fishy]:+-f}
    OUTPUT="$REPLY"
  else
    OUTPUT="%~"
  fi
  if (( zincs_cwd[hyperlink] )); then
    REPLY=$'%{\e]8;;file://'${HOSTNAME}${PWD}$'\e\\%}'${OUTPUT}$'%{\e]8;;\e\\%}'
  else
    REPLY="${OUTPUT}"
  fi
}

# Re-renders the segment output on the chpwd hook.
_zincs_cwd_chpwd ()
{
  _ZINC_DBG_OUT "_zincs_cwd_chpwd $@"
  _zincs_cwd_output
  zincs_cwd[chpwd_output]="$REPLY"
}

zincs_cwd ()
{
  # _ZINC_DBG_OUT "zincs_cwd called with args ${(j., .)@}"

  while (( ${+1} )); do
    case ${1} in
      on_chpwd|use_chpwd|chpwd)
        zincs_cwd[on_chpwd]=1
        ;;
      rtab)
        zincs_cwd[rtab]=1
        ;;
      hyperlink|hyperlinks)
        zincs_cwd[hyperlink]=1
        ;;
      notidlehome)
        zincs_cwd[rtab_tidle]=0
        ;;
      fishy)
        zincs_cwd[rtab]=1
        zincs_cwd[rtab_fishy]=1
        ;;
      full_git_roots)
        zincs_cwd[rtab_full_git_roots]=1
        ;;
    esac
    shift
  done

  if ! (( zincs_cwd[on_chpwd] )); then
    _zincs_cwd_output
  else
    REPLY="${zincs_cwd[chpwd_output]}"
  fi

}

@zinc-add-hook _zinc_hook_chpwd _zincs_cwd_chpwd

zincs_cwd "$@"
